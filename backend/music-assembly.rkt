#lang racket/unit

(require "../backend-sig.rkt")

(import)
(export backend^)

(define (eval-prog prog eval-this port-out)
  (displayln prog port-out))

(define (eval-call  mark?) (void))
(define (eval-ret) (void))
(define (eval-push-estk) (void))
(define (eval-pop-estk) (void))
(define (eval-push-astk) (void))
(define (eval-pop-astk) (void))
(define (eval-ins-mark  mark?) (void))
(define (eval-mov-rval->reg  integer?) (void))
(define (eval-mov-areg->reg  integer?  integer?1) (void))
(define (eval-mov-int->reg  integer?  integer?2) (void))
(define (eval-jump  mark?) (void))
(define (eval-swap-reg/areg  integer?  integer?1) (void))
(define (eval-mov-int->rval  integer?) (void))
(define (eval-note/3) (void))
(define (eval-cmd/3) (void))
(define (eval-push-cstk) (void))
(define (eval-pop-cstk) (void))
(define (eval-mov-reg->recnt  integer?) (void))
(define (eval-dec-recnt) (void))
(define (eval-jump-recnt=int  integer?  mark) (void))
(define (eval-cmd-val/1) (void))
(define (eval-jump-reg!=reg  integer?  integer?1  mark?) (void))
(define (eval-jump-reg=reg  integer?  integer?1 mark?) (void))
(define (eval-jump-reg<=reg  integer?  integer?1  mark?) (void))
(define (eval-jump-reg>=reg  integer?  integer?1  mark?) (void))
(define (eval-jump-reg<reg  integer?  integer?1 mark?) (void))
(define (eval-jump-reg>reg  integer?  integer?1 mark?) (void))
